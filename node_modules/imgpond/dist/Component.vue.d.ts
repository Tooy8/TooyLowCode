export default _sfc_main;
declare namespace _sfc_main {
    const name: string;
    namespace components {
        export { ImgCropper };
    }
    namespace inject {
        namespace elForm {
            const _default: {};
            export { _default as default };
        }
    }
    namespace props {
        const accept: {};
        const upload: {};
        const aspectRatio: {};
        const fixedRatio: {};
        const aspectRatioDeviation: {};
        const count: {};
        namespace disabled {
            export const type: BooleanConstructor;
            const _default_1: undefined;
            export { _default_1 as default };
        }
        namespace editable {
            const type_1: BooleanConstructor;
            export { type_1 as type };
            const _default_2: undefined;
            export { _default_2 as default };
        }
        namespace value {
            function validator(value: any): any;
        }
        const valueType: {};
        const size: {};
        const srcAt: {};
    }
    function data(): {
        need2Crop: boolean;
        cropper: {
            queue: never[];
            show: boolean;
            file: null;
            submitted: boolean;
        };
        uploading: boolean;
        uploadingCount: number;
        files: never[];
        sortablejs: null;
    };
    function data(): {
        need2Crop: boolean;
        cropper: {
            queue: never[];
            show: boolean;
            file: null;
            submitted: boolean;
        };
        uploading: boolean;
        uploadingCount: number;
        files: never[];
        sortablejs: null;
    };
    namespace computed {
        function Attrs(): any;
        function Attrs(): any;
        function AspectRatio(): any;
        function AspectRatio(): any;
        function AspectRatioDeviation(): any;
        function AspectRatioDeviation(): any;
        function SrcAt(): any;
        function SrcAt(): any;
        function Accept(): any;
        function Accept(): any;
        function acceptWarning(): any;
        function acceptWarning(): any;
        function Upload(): any;
        function Upload(): any;
        function Disabled(): any;
        function Disabled(): any;
        function isFull(): any;
        function isFull(): any;
        function aspectRatioText(): any;
        function aspectRatioText(): any;
        function sizeText(): string | undefined;
        function sizeText(): string | undefined;
        function ValueType(): any;
        function ValueType(): any;
        function Count(): any;
        function Count(): any;
        function MaxCount(): any;
        function MaxCount(): any;
        function MinCount(): any;
        function MinCount(): any;
        function Size(): any;
        function Size(): any;
        function MaxSize(): any;
        function MaxSize(): any;
        function MinSize(): any;
        function MinSize(): any;
        function Editable(): any;
        function Editable(): any;
        function canSort(): any;
        function canSort(): any;
    }
    namespace watch {
        export namespace value_1 {
            const immediate: boolean;
            function handler(n: any): void;
            function handler(n: any): void;
        }
        export { value_1 as value };
        export namespace canSort {
            const immediate_1: boolean;
            export { immediate_1 as immediate };
            export function handler(n: any): void;
            export function handler(n: any): void;
        }
    }
    namespace methods {
        function onCropperOpen(): void;
        function onCropperOpen(): void;
        function onCropperClosed(): void;
        function onCropperClosed(): void;
        function onCountExceed(files: any, fileList: any): void;
        function onCountExceed(files: any, fileList: any): void;
        function emitChange(files: any): void;
        function emitChange(files: any): void;
        function onActivatefile(file: any): void;
        function onActivatefile(file: any): void;
        function onBeforeRemove(file: any, fileList: any): false | undefined;
        function onBeforeRemove(file: any, fileList: any): false | undefined;
        function verifyExtension(fileName: any): any;
        function verifyExtension(fileName: any): any;
        function beforeAddFile(item: any): Promise<boolean>;
        function beforeAddFile(item: any): Promise<boolean>;
        function load(): void;
        function load(): void;
        function loaded(): void;
        function loaded(): void;
        function onCropperClose(): void;
        function onCropperClose(): void;
        function onCropperCancel(isCancel?: boolean): void;
        function onCropperCancel(isCancel?: boolean): void;
        function onCropperConfirm(blob: any): void;
        function onCropperConfirm(blob: any): void;
        function sort(): void;
        function sort(): void;
        function onChange(file: any, fileList: any): void;
        function onChange(file: any, fileList: any): void;
        function onRemove(file: any, fileList: any): void;
        function onRemove(file: any, fileList: any): void;
        function beforeUpload(file: any): void;
        function beforeUpload(file: any): void;
        function onError(e: any, file: any, fileList: any): void;
        function onError(e: any, file: any, fileList: any): void;
        function onSuccess(response: any, file: any, fileList: any): void;
        function onSuccess(response: any, file: any, fileList: any): void;
        function httpRequest(item: any): void;
        function httpRequest(item: any): void;
    }
}
import ImgCropper from "./components/ImgCropper.vue";
