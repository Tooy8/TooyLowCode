{"remainingRequest":"D:\\开源项目\\Tooy-LowCode\\lowCode\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\开源项目\\Tooy-LowCode\\lowCode\\src\\components\\SaveDialog\\HomeCover.vue?vue&type=style&index=0&id=0216fabe&lang=scss&scoped=true&","dependencies":[{"path":"D:\\开源项目\\Tooy-LowCode\\lowCode\\src\\components\\SaveDialog\\HomeCover.vue","mtime":1694431639992},{"path":"D:\\开源项目\\Tooy-LowCode\\lowCode\\node_modules\\css-loader\\dist\\cjs.js","mtime":1693619861603},{"path":"D:\\开源项目\\Tooy-LowCode\\lowCode\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1693619864566},{"path":"D:\\开源项目\\Tooy-LowCode\\lowCode\\node_modules\\px2rem-loader\\index.js","mtime":1693619901908},{"path":"D:\\开源项目\\Tooy-LowCode\\lowCode\\node_modules\\postcss-loader\\src\\index.js","mtime":1693619864324},{"path":"D:\\开源项目\\Tooy-LowCode\\lowCode\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1693619903311},{"path":"D:\\开源项目\\Tooy-LowCode\\lowCode\\node_modules\\sass-resources-loader\\lib\\loader.js","mtime":1693619810749},{"path":"D:\\开源项目\\Tooy-LowCode\\lowCode\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1693619820390},{"path":"D:\\开源项目\\Tooy-LowCode\\lowCode\\node_modules\\vue-loader\\lib\\index.js","mtime":1693619864566}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQouY292ZXIgew0KICB3aWR0aDogMzc1cHg7DQogIG1pbi1oZWlnaHQ6IDY2N3B4Ow0KICBvdmVyZmxvdzogaGlkZGVuOw0KICBib3gtc2hhZG93OiAwIDAgMTBweCByZ2JhKDAsIDAsIDAsIDAuMik7DQp9DQo="},{"version":3,"sources":["HomeCover.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoJA;AACA;AACA;AACA;AACA;AACA","file":"HomeCover.vue","sourceRoot":"src/components/SaveDialog","sourcesContent":["<!--\r\n * @Description: 首页封面\r\n\r\n-->\r\n<template>\r\n  <el-dialog :visible.sync=\"show\" :append-to-body=\"true\" :show-close=\"false\" :close-on-click-modal=\"false\" top=\"50px\"\r\n    width=\"415px\" class=\"flex-center\">\r\n    <div v-loading=\"show\" id=\"cover\" class=\"cover\">\r\n      <iframe v-if=\"show\" ref=\"iframe\" class=\"w-100\" frameborder=\"no\" :style=\"{ height: '667px' }\" :src=\"iframeUrl\"\r\n        @load=\"setWidgetsMessage\"></iframe>\r\n    </div>\r\n  </el-dialog>\r\n</template>\r\n\r\n<script>\r\nimport RealTimeView from \"@/components/TopBar/RealTimeView\";\r\nimport { uploadCover } from \"@/api/project\";\r\nimport global from \"@/config/global\";\r\nimport { mapGetters } from \"vuex\";\r\n\r\nexport default {\r\n  name: \"HomeCover\",\r\n\r\n  components: {\r\n    RealTimeView,\r\n  },\r\n\r\n  mounted() {\r\n    this.getMessage();\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      show: false,\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    ...mapGetters([\"project\"]),\r\n\r\n    iframeUrl() {\r\n      return `${global.viewUrl}pages/build/build?operate=build`;\r\n    },\r\n\r\n    // 首页配置数据\r\n    home() {\r\n      return this.project.pages.find((page) => page.home);\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    /**\r\n     * 初始化\r\n     * 1. 初始化iframe页面\r\n     * 2. 等待2s，通知iframe调用方法生成封面base64\r\n     *\r\n     */\r\n    async init() {\r\n      await this.open();\r\n\r\n      this.createCover();\r\n    },\r\n\r\n    // 打开弹窗，并延迟2s进行后续操作（2s用于渲染，uni-app图片渲染较慢）\r\n    open() {\r\n      return new Promise((resolve, reject) => {\r\n        this.show = true;\r\n        setTimeout(() => {\r\n          resolve();\r\n        }, 1000);\r\n      });\r\n    },\r\n\r\n    // 发送物料列表用于渲染\r\n    setWidgetsMessage() {\r\n      this.$refs.iframe.contentWindow.postMessage(\r\n        {\r\n          even: \"list\",\r\n          params: this.home.componentList,\r\n        },\r\n        \"*\"\r\n      );\r\n    },\r\n\r\n    // 发送信息，通知iframe调用方法生成封面base64\r\n    createCover() {\r\n      this.$refs.iframe.contentWindow.postMessage(\r\n        {\r\n          even: \"cover\",\r\n        },\r\n        \"*\"\r\n      );\r\n    },\r\n\r\n    // 监听iframe，生成封面base64后会通知回调\r\n    getMessage() {\r\n      let self = this;\r\n      window.addEventListener(\"message\", function (e) {\r\n        let { type, params } = e.data;\r\n        if (type == \"getCoverBase64\") {\r\n          self.upload(params.base64);\r\n        }\r\n      });\r\n    },\r\n\r\n    // 上传封面\r\n    upload(base64) {\r\n      return new Promise((resolve, reject) => {\r\n        let coverFile = this.getFile(base64);\r\n        let formData = new FormData();\r\n        formData.append(\"domainId\", 3);\r\n        formData.append(\"dir\", \"img\");\r\n        formData.append(\"file\", coverFile);\r\n        // 图片上传服务器\r\n        uploadCover(formData)\r\n          .then((res) => {\r\n            if ((res.errorCode = \"00000\")) {\r\n              console.log(\"图片上传服务器成功\");\r\n              this.$emit(\"complete\", {\r\n                status: 1,\r\n                data: res.data,\r\n              });\r\n            }\r\n          })\r\n          .finally(() => (this.show = false));\r\n      });\r\n    },\r\n\r\n    // base64整合文件\r\n    getFile(dataurl, filename = \"file\") {\r\n      let arr = dataurl.split(\",\");\r\n      let mime = arr[0].match(/:(.*?);/)[1];\r\n      let suffix = mime.split(\"/\")[1];\r\n      let bstr = atob(arr[1]);\r\n      let n = bstr.length;\r\n      let u8arr = new Uint8Array(n);\r\n      while (n--) {\r\n        u8arr[n] = bstr.charCodeAt(n);\r\n      }\r\n      return new File([u8arr], `${filename}.${suffix}`, {\r\n        type: mime,\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.cover {\r\n  width: 375px;\r\n  min-height: 667px;\r\n  overflow: hidden;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\r\n}\r\n</style>\r\n"]}]}