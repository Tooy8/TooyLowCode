export default _sfc_main;
declare namespace _sfc_main {
    const name: string;
    const mixins: any[];
    namespace inject {
        namespace elForm {
            const _default: {};
            export { _default as default };
        }
    }
    namespace props {
        export const value: {};
        export const label: {};
        export namespace options {
            const type: ArrayConstructor;
        }
        const props_1: {};
        export { props_1 as props };
        export namespace ellipsis {
            const type_1: BooleanConstructor;
            export { type_1 as type };
            const _default_1: undefined;
            export { _default_1 as default };
        }
        export namespace allowSelectAll {
            const type_2: BooleanConstructor;
            export { type_2 as type };
            const _default_2: undefined;
            export { _default_2 as default };
        }
        export const search: {};
        export namespace searchImmediately {
            const type_3: BooleanConstructor;
            export { type_3 as type };
            const _default_3: undefined;
            export { _default_3 as default };
        }
    }
    function data(): {
        value__: any;
        initialValue: undefined;
        popper: null;
        unwatchOptions: null;
        loading: undefined;
        options__: never[];
        optionGroupPropsList: never[];
        optionPropsList: never[];
        allSelected: boolean;
        indeterminate: boolean;
        valueInitializedWhenMultiple: boolean;
        previousQuery: null;
    };
    function data(): {
        value__: any;
        initialValue: undefined;
        popper: null;
        unwatchOptions: null;
        loading: undefined;
        options__: never[];
        optionGroupPropsList: never[];
        optionPropsList: never[];
        allSelected: boolean;
        indeterminate: boolean;
        valueInitializedWhenMultiple: boolean;
        previousQuery: null;
    };
    namespace computed {
        function AllowSelectAll(): any;
        function AllowSelectAll(): any;
        function Listeners(): any;
        function Listeners(): any;
        function grouped(): any;
        function grouped(): any;
        function itemTypeIsJSON(): any;
        function itemTypeIsJSON(): any;
        function valueComesFromObject(): false | (() => any);
        function valueComesFromObject(): false | (() => any);
        function ScopedSlots(): {};
        function ScopedSlots(): {};
        function ElSelectProps(): any;
        function ElSelectProps(): any;
        function Ellipsis(): void;
        function Ellipsis(): void;
        function valueType(): any;
        function valueType(): any;
        function labelType(): any;
        function labelType(): any;
        function labelRightType(): any;
        function labelRightType(): any;
        function disabledType(): any;
        function disabledType(): any;
        function groupLabelType(): any;
        function groupLabelType(): any;
        function groupDisabledType(): any;
        function groupDisabledType(): any;
        function groupOptionsType(): any;
        function groupOptionsType(): any;
        function Props(): any;
        function Props(): any;
        function Search(): any;
        function Search(): any;
        function SearchImmediately(): any;
        function SearchImmediately(): any;
        function isMultiple(): any;
        function isMultiple(): any;
    }
    namespace watch {
        export namespace value_1 {
            const immediate: boolean;
            function handler(n: any, o: any): void;
            function handler(n: any, o: any): void;
        }
        export { value_1 as value };
        export namespace value__ {
            function handler(n: any, o: any): void;
            function handler(n: any, o: any): void;
        }
        export namespace options_1 {
            const immediate_1: boolean;
            export { immediate_1 as immediate };
            export function handler(n: any, o: any): void;
            export function handler(n: any, o: any): void;
        }
        export { options_1 as options };
    }
    function created(): void;
    function created(): void;
    function mounted(): void;
    function mounted(): void;
    namespace methods {
        function showLabel(): void;
        function showLabel(): void;
        function onVisibleChange(isVisible: any): void;
        function onVisibleChange(isVisible: any): void;
        function setOptions__(n: any): void;
        function setOptions__(n: any): void;
        function selectAll(): void;
        function selectAll(): void;
        function resetField(): void;
        function resetField(): void;
        function validate(trigger: any, callback: any): void;
        function validate(trigger: any, callback: any): void;
        function clearValidate(): void;
        function clearValidate(): void;
        function getRules(): never[];
        function getRules(): never[];
        function getFilteredRule(): never[];
        function getFilteredRule(): never[];
        function validateProps(propKey: any): "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function";
        function validateProps(propKey: any): "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function";
        function onOptionClick(v: any, i: any): void;
        function onOptionClick(v: any, i: any): void;
        function remoteMethod(e: any, isImmediate?: boolean): void;
        function remoteMethod(e: any, isImmediate?: boolean): void;
        function syncSelectAllBtn(value: any): void;
        function syncSelectAllBtn(value: any): void;
        function onChange(value: any): void;
        function onChange(value: any): void;
        function getValue(v: any, i: any): any;
        function getValue(v: any, i: any): any;
        function getLabel(v: any, i: any): string;
        function getLabel(v: any, i: any): string;
        function getLabelRight(v: any, i: any): string;
        function getLabelRight(v: any, i: any): string;
        function getGroupLabel(v: any, i: any): string;
        function getGroupLabel(v: any, i: any): string;
        function isDisabled(v: any, i: any): boolean;
        function isDisabled(v: any, i: any): boolean;
        function isGroupDisabled(v: any, i: any): boolean;
        function isGroupDisabled(v: any, i: any): boolean;
        function getGroupOptions(v: any, i: any): any;
        function getGroupOptions(v: any, i: any): any;
    }
}
